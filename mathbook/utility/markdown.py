# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/utility.markdown.ipynb (unless otherwise specified).

__all__ = ['WEBSITE_URL', 'find_links_in_markdown_text', 'link_with_anchor', 'get_formatted_markdown_link',
           'replace_all_links_with_formatted_links', 'find_footnotes_in_markdown_text',
           'replace_all_footnotes_with_formatted_footnotes', 'embed_markdown_file']

# Cell
from IPython.display import display, Markdown
from .string import replace_string_by_indices
import os.path
from pathlib import Path
import re
import urllib.parse


WEBSITE_URL = 'https://hyunjongkimmath.github.io/mathbook/'

# Cell
def find_links_in_markdown_text(text):
    """Returns ranges in the markdown text string where links occur.
    """
    matches = re.finditer('\\[.*?\\]\\(.*?\\)', text)
    return [match.span() for match in matches]

# Cell
#TODO make it so that an anchor of the form '#anchor' is anchored to the current document.
def link_with_anchor(link_name, destination='website'):
    """Formats link so that the file extension comes before
    the pound sign of the anchor.
    """
    assert link_name and destination in ['website', 'notebook']
    link_parts = link_name.split('#')
    assert len(link_parts) <= 2
    anchor = '' if len(link_parts) == 1 else f'#{link_parts[1]}'
    extension = '.html' if destination == 'website' else '.ipynb'
    return f'{link_parts[0]}{extension}{anchor}'

# Cell
def get_formatted_markdown_link(unformatted_link, destination='website'):
    """Formats markdown styled link string.
    """
    assert destination in ['website', 'notebook']
    assert re.fullmatch(pattern='\\[.*\\]\\(.*\\)', string=unformatted_link)
    matches = re.finditer('\\(.*?\\)', unformatted_link)
    start, end = next(matches).span()
    link_name = unformatted_link[start+1:end-1]
    relative_link = link_with_anchor(link_name, destination=destination)
    if destination == 'website':
        link = f'({WEBSITE_URL}{relative_link})'
    else:
        link = f'({relative_link})'
    return replace_string_by_indices(unformatted_link, (start, end),
                                     replace_with = link)

# Cell
# TODO make it so that if a link is already specified with a format, then the format
# is preserved.
# TODO make it so that if a link is a url, then the url is preserved.
def replace_all_links_with_formatted_links(text, destination='website'):
    """Returns a modification of ``text`` with all links formatted."""
    assert destination in ['website', 'notebook']
    link_ranges = find_links_in_markdown_text(text)
    formatted_links = [get_formatted_markdown_link(text[start:end],
                                                   destination=destination)
                          for start, end in link_ranges]
    return replace_string_by_indices(text, link_ranges, formatted_links)


# Cell
def find_footnotes_in_markdown_text(text):
    """Returns ranges in the markdown text string where footnotes occur.
    """
    matches = re.finditer('\\[\\^.*\\]\\:.*', text)
    return [match.span() for match in matches]

# Cell
def replace_all_footnotes_with_formatted_footnotes(
        text, destination='website', origin='website'):
    """Returns a modification of ``text`` with all footnote links formatted."""
    assert destination and origin in ['website', 'notebook']
    assert not (destination == 'notebook' and origin == 'website'),\
        'destination, origin should not be specified to "notebook", "website".'
    footnote_ranges = find_footnotes_in_markdown_text(text)
    formatted_footnotes = [link_with_anchor(text[start:end], destination=destination)
                              for start, end in footnote_ranges]
    if destination == 'website':
        formatted_footnotes = list(map(_format_website_link, formatted_footnotes))
    return replace_string_by_indices(text, footnote_ranges, formatted_footnotes)


def _format_website_link(text):
    semicolon_index = text.find(':')
    link_text = text[semicolon_index+1:]
    return f'{text[:semicolon_index+1]}{WEBSITE_URL}{link_text}'

# Cell
def embed_markdown_file(
        file_path, display_file_link=False, destination='website',
        origin='website'):
    """Embed markdown file content into ipynb.
    """
    if not os.path.exists(file_path):
        return
    with open(file_path, 'r') as markdown_file:
        text = markdown_file.read()
        text = replace_all_links_with_formatted_links(text, destination=destination)
        text = replace_all_footnotes_with_formatted_footnotes(
            text, destination=destination, origin=origin)
        display(Markdown(text))
        markdown_file.close()